<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(SolutionDir)\References\MySql.Data.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="MySql.Data.MySqlClient" #>
<#@ output extension=".cs" #>
<#
	//数据库连接字符串
	var connectionString = "server=127.0.0.1;user id=root;password=1024;database=test;";
#>
<#
	var connection = new MySqlConnection(connectionString);
	var tablesql = string.Format("SELECT TABLE_NAME as TableName,TABLE_TYPE as TableType,TABLE_COMMENT as TableComment from INFORmation_schema.TABLES WHERE TABLE_SCHEMA='{0}'", connection.Database);
	var columnsql = string.Format("SELECT TABLE_NAME as TableName,COLUMN_NAME as ColumnName,COLUMN_COMMENT as ColumnComment,COLUMN_DEFAULT as ColumnDefault,IS_NULLABLE as IsNullable,DATA_TYPE as DataType,COLUMN_TYPE as ColumnType,COLUMN_KEY as ColumnKey,EXTRA as Extra FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='{0}' ORDER BY ORDINAL_POSITION", connection.Database);
	var tables = Utils.Query<Table>(connection,tablesql);
	var columns = Utils.Query<Column>(connection,columnsql);
    connection.Close();
#>
using SqlBatis;
using System.Data;
using SqlBatis.Queryables;
using Microsoft.Extensions.Logging;

namespace SqlBatis.XUnit
{
    /// <summary>
    /// 数据库上下文
    /// </summary>
    public class MyDbContext : DbContext
    {
         private readonly ILogger<MyDbContext> _logger;

         public MyDbContext(DbContextBuilder builder,ILogger<MyDbContext> logger)
            :base(builder)
         {
            _logger = logger;
         }
         
         protected override IDbCommand CreateDbCommand(string sql, object parameter, int? commandTimeout = null, CommandType? commandType = null)
         {
             _logger.LogInformation(sql);
             return base.CreateDbCommand(sql, parameter, commandTimeout, commandType);
         }
        <#foreach(var table in tables){#>
       
        /// <summary>
        /// <#=table.TableComment#>
        /// </summary>
        public IDbQueryable<<#=Utils.Pascal(table.TableName)#>Dto> <#=Utils.Pascal(table.TableName)#>
        {
            get
            {
                return new DbQueryable<<#=Utils.Pascal(table.TableName)#>Dto>(this);
            
            }
        }
<#}#>
    
    }
}



<#+
    public class Table
    {
        public string TableName { get; set; }
        public string TableType { get; set; }
        public string TableComment { get; set; }
    }
    public class Column
    {
        public string TableName { get; set; }
        public string ColumnName { get; set; }
        public string ColumnComment { get; set; }
        public string ColumnDefault { get; set; }
        public string IsNullable { get; set; }
        public string ColumnType { get; set; }
        public string DataType { get; set; }
        public string ColumnKey { get; set; }
		public string Extra { get; set; }
    }
    public static class Utils
    {
		//字段类型映射
        public static string GetCSharpType(string columnType)
        {
            var type = "object";
            switch (columnType)
            {
                case "varchar": type = "string"; break;
                case "text": type = "string"; break;
				case "char": type = "string"; break;
                case "bit": type = "bool?"; break;
				case "tinyint": type = "int?"; break;
				case "smallint": type = "int?"; break;
                case "int": type = "int?"; break;
				case "integer": type = "int?"; break;
				case "bigint": type = "int?"; break;
				case "mediumint": type = "int?"; break;
				case "real": type = "float?"; break;
				case "float": type = "float?"; break;
				case "double": type = "double?"; break;
				case "decimal": type = "decimal?"; break;
				case "date": type = "DateTime?"; break;
				case "datetime": type = "DateTime?"; break;
                case "json": type = "System.Text.Json.JsonElement?"; break;
            }
            return type;
        }
		//Pacsl命名转换
        public static string Pascal(string name)
        {
            var list = new List<string>();
            foreach (var item in name.Split('_'))
            {
                list.Add(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(item.ToLower()));
            }
            return string.Join("",list);
        }
		//Camel命名转换
		public static string Camel(string name)
		{
			name = Pascal(name);			
            return char.ToLower(name[0]) + name.Substring(1);
		}
         //数据库查询
        public static List<T> Query<T>(IDbConnection connection, string sql,object param=null)
        {
            if (connection.State!=ConnectionState.Open)
            {
                connection.Open();
            }
            var cmd = connection.CreateCommand();
            cmd.CommandText = sql;
            var list = new List<T>();
            using (var reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    var obj = Activator.CreateInstance(typeof(T));
                    foreach (var item in obj.GetType().GetProperties())
                    {
                        var i = reader.GetOrdinal(item.Name);
                        if (!reader.IsDBNull(i))
                        {
                            item.SetValue(obj,reader.GetValue(i));
                        }
                    }
                    list.Add((T)obj);
                }
            }
            return list;
        }
    }
#>